/*
 * Copyright 2024 - present CommunityRadarGG <https://community-radar.de/>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "java"
    id "idea"
    id "gg.essential.loom" version "1.11.37"
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id "com.diffplug.spotless" version "7.2.1"
    id 'net.kyori.blossom' version '1.3.1'
}

version = project.mod_version
group = project.maven_group

sourceSets {
    main {
        output.setResourcesDir(java.classesDirectory)
    }
}

base {
    archivesName = project.mod_id
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("de.oceanlabs.mcp:mcp_stable:${project.mappings_version}")
    forge("net.minecraftforge:forge:${project.forge_version}")
}

loom {
    forge {
        pack200Provider.set(new Pack200Adapter())
        // accessTransformer("src/main/resources/META-INF/${project.mod_id}_at.cfg")
    }
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(8))
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.register("includeLicenses", Copy) {
    from(project.projectDir) {
        include("LICENSE")
        include("NOTICE")
    }

    into(sourceSets.main.output.resourcesDir)
}

processResources {
    dependsOn tasks.includeLicenses

    inputs.property "version", project.version
    inputs.property "mc_version", project.minecraft_version

    filesMatching("mcmod.info") {
        expand "version": project.version, "mc_version": project.minecraft_version, "mod_id": project.mod_id
    }
}

blossom {
    replaceTokenIn("src/main/java/io/github/communityradargg/forgemod/CommunityRadarMod.java")
    replaceToken("@VERSION@", project.version)
    replaceToken("@MOD_ID@", project.mod_id)
}

spotless {
    java {
        licenseHeaderFile(rootProject.file("HEADER"))
        endWithNewline()
        trimTrailingWhitespace()
        removeUnusedImports()
        removeWildcardImports()
    }

    kotlin {
        licenseHeaderFile(rootProject.file("HEADER"))
        endWithNewline()
        trimTrailingWhitespace()
    }
}
