/*
 * Copyright 2024 - present CommunityRadarGG <https://community-radar.de/>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id "java"
    id "idea"
    id "net.minecraftforge.gradle.forge"
    id 'org.cadixdev.licenser' version '0.6.1'
}

repositories {
    mavenCentral()
    maven { url = "https://jitpack.io/" }
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.encoding = "UTF-8"
}


minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
}

configurations {
    include
    implementation.extendsFrom(include)

    configurations {
        include
        implementation.extendsFrom(include)
        runtimeOnly.canBeResolved = true
    }
}

dependencies {
    include fileTree(include: ["*.jar"], dir: "libs")
    implementation group: 'org.jetbrains', name: 'annotations', version: '15.0'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("mcmod.info") {
        expand "version": project.version, "mcversion": project.minecraft.version
    }
}

tasks.register('moveResources') {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)


tasks.register('deobfJar', Jar) {
    from sourceSets.main.output
    archiveClassifier = 'deobf'
}

tasks.register('srcJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

artifacts {
    archives deobfJar
    archives srcJar
}

jar {
    from("LICENSE") {
        rename {
            "${it}_${project.archives_base_name}"
        }
    }
}

license {
    setNewLine(false)
    header(project.file("HEADER"))
    properties {
        year = "2024 - present"
        name = "CommunityRadarGG <https://community-radar.de/>"
    }
    tasks {
        gradle {
            files.from('build.gradle', 'settings.gradle', 'gradle.properties')
        }
    }
}